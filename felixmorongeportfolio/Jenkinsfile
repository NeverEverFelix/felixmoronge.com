pipeline {
  agent {
    kubernetes {
      defaultContainer 'kaniko'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: kaniko-deploy
spec:
  serviceAccountName: jenkins-irsa-sa
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      imagePullPolicy: Always
      command:
        - /bin/sh
      args:
        - -c
        - sleep infinity
      workingDir: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
      env:
        - name: AWS_REGION
          value: us-east-1
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        - name: AWS_ROLE_ARN
          value: arn:aws:iam::137068221475:role/jenkins-irsa-role
        - name: AWS_WEB_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
  volumes:
    - name: workspace-volume
      emptyDir: {}
"""
    }
  }

  environment {
    ECR_REGISTRY = "137068221475.dkr.ecr.us-east-1.amazonaws.com"
    IMAGE_NAME = "felixmoronge-portfolio"
    IMAGE_TAG = "latest"
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Verify Dockerfile Presence') {
      steps {
        container('kaniko') {
          dir("${env.WORKSPACE}") {
            sh '''
              echo "üìÇ Listing workspace contents:"
              ls -la
              echo "üìÑ Previewing Dockerfile:"
              head -n 20 Dockerfile || echo "‚ö†Ô∏è Dockerfile not found"
            '''
          }
        }
      }
    }

    stage('Build and Push with Kaniko') {
      steps {
        container('kaniko') {
          dir("${env.WORKSPACE}") {
            sh '''
              echo "üöÄ Starting Kaniko build..."
              /kaniko/executor \
                --context=. \
                --dockerfile=Dockerfile \
                --destination=$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG \
                --verbosity=debug \
                --log-format=text \
                --log-timestamp \
                --log-file=.kaniko.log \
                --cache=true \
                --cache-repo=$ECR_REGISTRY/$IMAGE_NAME
            '''
          }
        }
      }
    }
  }

  post {
    failure {
      container('kaniko') {
        dir("${env.WORKSPACE}") {
          sh '''
            echo "üß® Kaniko failed. Dumping logs:"
            tail -n 100 .kaniko.log || echo "‚ùå No Kaniko log found."
          '''
        }
      }
    }
  }
}

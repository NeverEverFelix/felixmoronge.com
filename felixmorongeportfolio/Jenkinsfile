pipeline {
  agent {
    kubernetes {
      label 'ci-agent'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: ci-agent
spec:
  containers:
    - name: docker
      image: docker:24.0.6-cli
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: kubeconfig
          mountPath: /root/.kube
        - name: workspace-volume
          mountPath: /home/jenkins/agent

  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
    - name: kubeconfig
      secret:
        secretName: jenkins-kubeconfig
    - name: workspace-volume
      emptyDir: {}
"""
    }
  }

  environment {
    IMAGE_NAME = 'nevereverfelix/felixmoronge.com'
    DOCKER_CREDENTIALS_ID = 'docker'
    GIT_CREDENTIALS_ID = 'githubPAT'
    IMAGE_TAG = 'dev'
  }

  options {
    skipDefaultCheckout()
  }

  triggers {
    githubPush()
  }

  stages {
    stage('Checkout') {
      steps {
        container('jnlp') {
          checkout([
            $class: 'GitSCM',
            branches: [[name: '*/main']],
            userRemoteConfigs: [[
              url: 'https://github.com/NeverEverFelix/felixmoronge.com',
              credentialsId: "${GIT_CREDENTIALS_ID}"
            ]]
          ])
          script {
            def tag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
            env.IMAGE_TAG = tag
            echo "✅ Set IMAGE_TAG = ${env.IMAGE_TAG}"
          }
          stash name: 'workspace', includes: '**/*'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        container('docker') {
          unstash 'workspace'
          withCredentials([usernamePassword(
            credentialsId: "${DOCKER_CREDENTIALS_ID}",
            usernameVariable: 'DOCKER_USER',
            passwordVariable: 'DOCKER_PASS'
          )]) {
            sh """
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              docker build -t "$IMAGE_NAME:$IMAGE_TAG" -f felixmorongeportfolio/Dockerfile felixmorongeportfolio
              docker push "$IMAGE_NAME:$IMAGE_TAG"
            """
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        container('docker') {
          unstash 'workspace'
          sh """
            apk add --no-cache curl bash coreutils
            curl -LO https://dl.k8s.io/release/v1.29.4/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

            cd felixmorongeportfolio

            # Avoid nodePort conflict by delete → sleep → apply
            kubectl delete -f k8s-deployment.yaml || true
            sleep 3
            kubectl apply -f k8s-deployment.yaml
          """
        }
      }
    }
  }

  post {
    success {
      echo "✅ Docker image $IMAGE_NAME:$IMAGE_TAG pushed and deployed."
    }
    failure {
      echo "❌ Build failed."
    }
  }
}